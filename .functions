#!/usr/bin/env bash

# Start the ssh-agent and add keys to the agent.
# Detects if on Mac; if so detects the macOS version and provides the
# appropriate pargs to add keys to the keychain
function start_agent {
    echo "Initializing new SSH agent..."
    eval "$(ssh-agent)"

    additional_arg=""
    if [[ $OSTYPE == darwin* ]]; then
        if [[ $(sw_vers -productVersion | cut -f1 -d '.') -lt 12 ]]; then
            additional_arg="-K"
        else
            additional_arg="--apple-use-keychain"
        fi
        ssh-add "$additional_arg"
    else
        ssh-add
    fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|env|.snakemake|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


# Set up fzf, if it's installed
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# Select a conda env to activate
sa() {
    ca    # otherwise: -bash: activate: No such file or directory
    local name=$(conda env list | grep -v "#" | fzf)
    local env=$(echo $name | awk '{print $1}');
    eval "source activate $env";
}



function prsetup {
    if [ -z $1 ]; then
        echo "Run this function in a clone of a repo with a pull request to set up"
        echo "to push back to the contributor's fork. When creating the PR, the "
        echo "contributor must have checked the box, 'Allow edits from maintainers'."
        echo "The first argument can be determined by looking at the top of the "
        echo "PR and copying the <contributor:branch>."
        echo
        echo "Usage: prsetup <contributor:branch>"
        echo
        echo "(assumes same name of repo as current origin)"
        echo
        return 1
    fi
    current_remote=$(git remote -v | grep "^origin" | grep "(fetch)" | cut -f2 | cut -f1 -d " ")
    current_repo_name=$(basename $current_remote)

    contributor=$(echo $1 | cut -f1 -d ":")
    contributor_branch=$(echo $1 | cut -f2 -d ":")

    contributor_fork=git@github.com:$contributor/$current_repo_name.git

    echo "The following are the detected variables:"
    echo "current_remote: " $current_remote
    echo "current_repo_name: " $current_repo_name
    echo "contributor_branch: " $contributor_branch
    echo "contributor: " $contributor
    echo "contributor_fork: " $contributor_fork

    git remote add $contributor $contributor_fork
    git fetch $contributor
    git checkout -b $contributor-$contributor_branch $contributor/$contributor_branch

    echo "Now make changes, and run:"
    echo "  git push $contributor HEAD:$contributor_branch"
}

function update_mac_ls_colors() {
    # This function checks if 1) OS is MacOS, 2) coreutils installed in conda's base
    # environment, 3) conda installed to path specified in '.setup.sh'. If so,
    # resets ls/dircolors for more consistent behavior across environments.
    if [[ $OSTYPE == darwin* ]]; then
        MAMBAFORGE_DIR=$HOME/mambaforge
        if [ -d "$MAMBAFORGE_DIR" ]; then
            # reset ls alias (from .aliases)
            file="$MAMBAFORGE_DIR/bin/ls"
            if [ -r "$file" ] && [ -f "$file" ]; then
                alias ls="$file --color=auto"
            fi
            # re-evaluate dircolors and re-export LS_COLORS (from .bashrc)
            file="$MAMBAFORGE_DIR/bin/dircolors"
            if [ -r "$file" ] && [ -f "$file" ]; then
                test -r ~/.dircolors && eval "$($file -b ~/.dircolors)" || eval "$($file -b)"
            fi
        fi
    fi
}

function ca() {
    # This function allows you to activate the base env only when you're ready
    # to (and don't activate it on EVERY new shell).
    #
    # You can also provide an env name or path to activate it.
    eval "$(conda shell.bash hook 2> /dev/null)"
    conda activate "$@"
    update_mac_ls_colors
}


function conda_deactivate_all() {
    # Keep deactivating until we no longer have a CONDA_PREFIX env var (which
    # might be a few times, if we had activated the base env and then another
    # env)
    eval "$(conda shell.bash hook 2> /dev/null)"
    while [ -n "$CONDA_PREFIX" ]; do
        conda deactivate;
    done
}

function hostlist() {
    # Parse ~/.ssh/config and print out a nicely-formatted table of configured
    # hosts. Useful for when you're trying to remember how to log in to an
    # infrequently-accessed host.
    paste \
        <(grep -i "^Host" ~/.ssh/config | grep -v "*" | awk '{print $2}') \
        <(grep -i "Hostname" ~/.ssh/config | grep -v "*" | awk '{print $2}') \
        | column -t \
        | sort
}
